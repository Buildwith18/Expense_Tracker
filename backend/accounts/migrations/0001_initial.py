# Generated by Django 5.1.5 on 2025-10-09 06:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('currency', models.CharField(choices=[('INR', 'Indian Rupee (₹)'), ('USD', 'US Dollar ($)'), ('EUR', 'Euro (€)'), ('GBP', 'British Pound (£)'), ('CAD', 'Canadian Dollar (C$)'), ('AUD', 'Australian Dollar (A$)'), ('JPY', 'Japanese Yen (¥)')], default='INR', help_text='Preferred currency for expense tracking', max_length=3)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture (optional)', null=True, upload_to='profile_pictures/')),
                ('monthly_budget', models.DecimalField(decimal_places=2, default=25000.0, help_text='Monthly budget limit', max_digits=10)),
                ('notifications_enabled', models.BooleanField(default=True, help_text='Enable email notifications')),
                ('dark_mode', models.BooleanField(default=False, help_text='Enable dark mode')),
                ('theme_color', models.CharField(default='blue', help_text='Preferred theme color', max_length=20)),
                ('compact_mode', models.BooleanField(default=False, help_text='Enable compact layout mode')),
                ('alert_threshold', models.IntegerField(default=80, help_text='Budget alert threshold percentage')),
                ('enable_alerts', models.BooleanField(default=True, help_text='Enable budget alerts')),
                ('reset_token', models.CharField(blank=True, help_text='Password reset token', max_length=32, null=True)),
                ('reset_token_expires', models.DateTimeField(blank=True, help_text='Password reset token expiration', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
